#include <stdio.h>
#include <stdlib.h>

typedef struct QueueNode {
    int val;
    struct QueueNode *next;
} QueueNode;

typedef struct Queue {
    int size;
    QueueNode *front;
    QueueNode *back;
} Queue;

Queue *InitializeQueue() {
    Queue *q = malloc(sizeof(Queue));
    q->size = 0;
    q->front = q->back = NULL;
    return q;
}

void enqueue(Queue *q, int val) {
    QueueNode *newNode = malloc(sizeof(QueueNode));
    newNode->val = val;
    newNode->next = NULL;

    if (q->size == 0) {
        q->front = q->back = newNode;
    } else {
        q->back->next = newNode;
        q->back = newNode;
    }

    q->size++;
}

int dequeue(Queue *q) {
    if (q->size == 0) {
        fprintf(stderr, "Queue is empty.\n");
        exit(1);
    }

    int val = q->front->val;
    QueueNode *temp = q->front;
    q->front = q->front->next;
    free(temp);
    q->size--;
    return val;
}

void solve(int arr[], int n, int k) {
    Queue *list = InitializeQueue();

    for (int i = 0; i < n; ++i) {
        while (list->size > 0 && i - list->front->val >= k) {
            dequeue(list);
        }

        while (list->size > 0 && arr[i] <= arr[list->back->val]) {
            dequeue(list);
        }

        enqueue(list, i);

        if (i >= k - 1) {
            printf("%d ", arr[list->front->val]);
        }
    }

    printf("\n");
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);
    int A[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &A[i]);
    }
    solve(A, n, m);
    return 0;
}
